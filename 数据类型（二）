# 011-2### 、查看数据类型的方法：

python基本数据类型包括了：列表(list)、元组(tuple)、字典(dict)、集合(set)

### 二，列表（list）：

#### 一，列表是有序的可变的元素集合 。

```
像字符串值用引号来标记字符串的起止一样，列表用左方括号开始，右方括号结束， 即[]。列表中的值也称为“表项”。
```

```
# list:有序、可变、允许重复的
```

二，常用功能

1，索引

```
L = ['a', 'b', 'c']
print(L[0])
print(L[-3])
# 列表是有序的可变的元素集合 。
L[0] = 'w'
print(L[0])
print(L)
print("="*20)
S = 'abc'
# print(S[0])
# S[0] = 'w'
# print(S[0])
# print(S)
```

2，长度

```
# 长度len()
print(len(L))
```

3，切片

```
# 切片
L = ['a', 'b', 'c']
print(L[:2])
print(L[-3:-1])
```

4，循环

```
 排序sort
# L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
   
L.sort(reverse=True)    # 逆序
print("2:", L)
L.reverse()
print("3:", L)
print("="*20)
```

5，查增删改

```
 增
L = ['a', 'b', 'c']
# 追加：append、（末尾添加单个元素）
# 批量追加：extend  （添加列表 ）
# 插入：insert  （指定位置添加）
a = [1, 2, 3, 4]
a.insert(0,'hello')   加到索引值0的位置
b= [96, 23]
a.extend(b)     将列表b加入a中


L.append('d')
print(L)

L2 = [1, 2, 3]
L.extend(L2)
print(L)

L.insert(1, 'w')
print(L)

# 删除
# 删一个尾巴,并且该尾巴可以赋值给另一个变量：pop
（删除最后，每次只能删除一个，如果指定了位置。那么删除指定位置（列表方法））
# 移除左边起第一个指定的元素：remove （删除直接指定元素（列表方法））
# 删除指定索引元素：del（删除指定索引位置）
# 清空：clear
a = L.pop()
print(a)
print(L)

L.append('w')
print(L)
L.remove('w')
print(L)

del(L[1])
print(L)

L.clear()
print(L)
```

6，包含

```
# 包含in
L = ['a', 'b', 'c']
a = 'c'
b = 'd'

print(a in L)   # True
print(b in L)   # False


```

#### 三，方法

1.功能

![1560525028960](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560525028960.png)

![1560525076728](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560525076728.png)

2.补充

```
# list
# 创建
li = []
li = list()
li = [1, 2, 3, 4]
li = list([1, 2, 3, 4])

# 转换
name = '托马斯'
l1 = list(name)
print(l1)
```

### 三，元组（tuple）

#### 一，元组是有序的不可变的元素集合 。

元组与列表几乎一样，元组使用小括号，列表使用方括号。

但列表可以修改（追加，移除，删除），元组不能修改

```
tuple:有序、不可变、允许重复的
```

```
tuple元组是有序的不可变的元素集合 。
# 变量初始化：元素可以是任何类型的数据
a = ()  # 空元组
b = (1, False, 'ab', [], ())
print('a的类型是：', type(a))    # a的类型是： <class 'tuple'>
print('b的类型是：', type(b))    # a的类型是： <class 'tuple'>

# 注意：单元素元组要注意，带上‘，’
f = ('hello')
g = ('hell0',)
print('f的类型是：', type(f))    # f的类型是： <class 'str'>
print('g的类型是：', type(g))    # g的类型是： <class 'tuple'>
```

#### 二，常用功能

1，索引

```
 索引
T = ('a', 'b', 'c')
print(T[1])  # 通过索引去取值

# T.index(value, [start, [stop]]) -> integer
print(T.index('b'))  # 通过值去获取索引

# T.count(value) -> integer
print(T.count('b'))
```

2，长度

```
长度len()
print(len(T))
```

3，切片

```
# 切片
print(T[1:])
print(T[-2:])
```

4，包含

```
# 包含
T = ('a', 'b', 'c')
a = 'c'
b = 'w'

print(a in T)
print(b in T)
```

5.补充

```
# tuple
# 创建
t = ()
t = tuple()
t = tuple([1, 2])

t = (11, 22, ['fei', {'k1': 'v1'}])
print(type(t))
```

#### 三，应用

1.方法

![1560525556709](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560525556709.png)

### 四，字典（dict）

#### 一，字典是由键值对构成（key、value）的无序集合

1，（不像字符串、列表和元祖那样有固定的位置）。

键（key）的数据类型一般为数字或字符串，且必须是唯一的，不能重复。
值（value）可以是任意数据类型。

items   获取所有的键值对

字典使用大括号{}。

```
# dict:无序、可变、key必须是唯一
```

```
dict字典是由键值对构成（key、value）的无序集合
# （不像字符串、列表和元祖那样有固定的位置）。
# 1，"a", ['ab', 2, 'c'], ('ab', 2, 'c')
# 姓名：xf， 密码：123456，。。。。。。。。。。。。。。
# {key: value}

# int/float/complex/bool/str/list/tuple/dict
# 初始化变量
# 字典key一般使用数字或者字符串，也可以使用元组， value可以使用任何类型的数据类型
a = {}  # 空字典
print('a的数据类型是：', type(a))  # a的数据类型是： <class 'dict'>
b = {
    1: 2,   # key:数字，value：数字
    'k1': 'v1',  # key:字符串， value：字符串
    False: True,
    'k2': [1, 2, 3],  # value:列表
    (1, 2, 3): (1, 2, 3),   # key: 元组， value：元组
    'k3': {                 # value: 字典
        'k2': 'v2',
        'k4': 'v9',
        'k5': {}
    },
}
print('b的数据类型是：', type(b))
```

#### 二，常用功能

1，键值对

```
 常用功能
D = {
    'k1': 'v1',
    'k2': 'v2',
    'k3': 'v3',
}

# D1 = {}
# L = [1, 2, 3]
# print(D1.fromkeys(L))
# print(D1.fromkeys(L, 'v'))
# 长度len()
print(len(D))

# 键、值、键值对
print(D.items())    # dict_items([('k1', 'v1'), ('k2', 'v2'), ('k3', 'v3')])
print(D.keys())    # dict_keys(['k1', 'k2', 'k3'])
print(D.values())    # dict_values(['v1', 'v2', 'v3'])

```

2.方法

```
D = {
    'k1': 'v1',
    'k2': 'v2',
    'k3': 'v3',
}
# dict
print(D.items())    # dict_items([('k1', 'v1'), ('k2', 'v2'), ('k3', 'v3')])
print(D.keys())     # dict_keys(['k1', 'k2', 'k3'])
print(D.values())   # dict_values(['v1', 'v2', 'v3'])

# 获取值
# 第一种方法：通过key值去取value值
print(D['k1'])

D = {
    'k1': 'v1',
    'k2': 'v2',
    'k3': 'v3',
}
# 第二种D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
# 通过给定的key查找对应的value值，如果给定的key在字典中，返回对应的value，如果不在，则默认返回None（如果设置了d，则返回d）
print("="*20)
print(D.get('k3'))
print(D.get('k4'))
print(D)
print(D.get('k4', 'false'))

# 第三种D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
# 通过给定的key查找对应的value值，如果给定的key在字典中，返回对应的value，如果不在,返回默认值，同时，在字典中增加了key：默认值的键值对（默认为None，如果设置了d，则使用d）
print("="*20)
print(D.setdefault("k3"))
print(D.setdefault("k4"))
print(D)
print(D.setdefault("k5", "v5"))
print(D)

# 增
# 第一种:通过key，key有则改，无则增
D = {
    'k1': 'v1',
    'k2': 'v2',
    'k3': 'v3',
}
print("="*20)
print(D['k1'])
D['k1'] = 'w'
print(D['k1'])
D['k4'] = 'v4'
print(D)

a=D.copy（）(增)

# 第二种：setdefault(k[,d])
# key有获取，无则新增
print(D.setdefault("k3"))
print(D.setdefault("k5", "v5"))
print(D)

# 删
D = {
    'k1': 'v1',
    'k2': 'v2',
    'k3': 'v3',
}
# pop:(获取并删除指定key值项)
# D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
# If key is not found, d is returned if given, otherwise KeyError is raised
a = D.pop('k2')
print(a)
print(D)

# popitem:获取并在字典中移除最后一项
b = D.popitem()
print(b)
print(D)

# clear(清空)
D.clear()
print(D)    # {}


```



#### 三，应用

1，方法

![1560525884287](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560525884287.png)

![1560525904318](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560525904318.png)

2.补充

```
# dict
# 创建方法
a = {}
a = dict(k1=123, k2=456, k3='v3')
print(a)
```

### 五，集合（set）

#### 一，定义

1，一个包含唯一元素的可变和无序的集合数据类型。集合的一个用途是快速删除列表中的重复项。 

集合使用大括号{}。

同数学上的集合类似，也有交集、并集、子集的数学运算

```
 set:无序、重要的应用去重
```

#### 二，常用功能

1，![1560526146654](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560526146654.png)

2.

```
# 一个包含唯一元素的可变和无序的集合数据类型
# 变量初始化,同列表类似，元素可以是任何数据类型(排除列表)
a = set()
print("a的数据类型是：", type(a))  # a的数据类型是： <class 'set'>
# 注 a = {} 是空字典
b = {1, 'a', ()}
print("b的数据类型是：", type(b))

# 添加（add、update）
SE = {1, 2, 3, 4, 5, 7, 8}
SE.add('hello')
print(SE)

# update:把要传入的元素拆分，作为个体传入到集合中
SE.update('hello')
print(SE)

# 删(remove/pop/discard)：
# remove:如果有，直接删除,如果无，报错
# pop:随机删除一个集合中的元素,如果集合没有元素报错
# discard：如果有，直接删除,如果无，不做任何操作
se = {1, 2, 3, 4, 5, 7, 8}
se.remove(4)
# se.remove(6)
print(se)

# pop
se.pop()
print(se)
# s1 = set()
# s1.pop()
# print(s1)

# discard
se = {1, 2, 3, 4, 5, 7, 8}
se.discard(4)
print(se)
se.discard(9)
print(se)

# 交集（&）（两个集合中都有的元素）
S1 = {1, 2, 5, 8, 10}
S2 = {2, 5, 10, 11, 15}

S3 = S1 & S2
print(S3)   # {2, 10, 5}

# 并集 |  （两个集合中所有的元素（去重））
S1 = {1, 2, 5, 8, 10}
S2 = {2, 5, 10, 11, 15}
# S3 = {1, 2, 5, 8, 10, 11, 15}
S4 = S1 | S2
print(S4)   # {1, 2, 5, 8, 10, 11, 15}

# 差集 -   （剩下的元素）
S1 = {1, 2, 5, 8, 10}
S2 = {2, 5, 10, 11, 15}
S5 = S1 - S2    # {1, 8}
print(S5)

# 相对差集^
S1 = {1, 2, 5, 8, 10}
S2 = {2, 5, 10, 11, 15}
S6 = S1 ^ S2
print(S6)   # {1, 8, 11, 15}

# 去重
L = [1, 2, 3, 4, 5, 5, 4, 6, 3, 8, 9, 7]
T = (1, 2, 3, 4, 5, 5, 4, 6, 3, 8, 9, 7)
S1 = set(L)
print(S1)
L = list(S1)
print(L)
S2 = set(T)
print(tuple(S2))

```



#### 三，应用

1，方法

![1560526186158](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560526186158.png)

![1560526227270](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560526227270.png)

![1560526240885](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560526240885.png)

2.补充

```
# 集合
s = set()
s = {1, 2, 3}
l = list(s)
print(l)
```

### 六，运算符

#### 一，定义

```
# 算术运算符：+，-，*，/，%，**，//
# 比较运算符：==，!=，>，<，>=，<=
# 赋值运算符：=，+=，-=，*=，/=，%=， **=，//=
# 逻辑运算符：and，or，not
# 成员运算符：in，not in
```

#### 二，应用

```
a = 10
b = 20
print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(a % b)    # 取余（返回除法的余数）
print(a ** b)   # 幂
print(a // b)   # 取整除（返回商的整数部分）
# 5 / 3 = 1...2

# 比较运算符：==，!=，>，<，>=，<=
a = 10
b = 20
print(a == b)   # 等于，False
print(a != b)   # 不等于，True
print(a > b)    # 大于
print(a < b)    # 小于
print(a >= b)   # 大于等于
print(a <= b)   # 小于等于

# 赋值运算符：=，+=，-=，*=，/=，%=， **=，//=
c = a + b   # 赋值
print(c)
c += a  # ====》c = c + a    先c和a相加，然后赋值给c
print(c)
c -= a  # ===>c = c - a
print(c)
c *= a  # 乘等于
c /= a  # 除等于
c %= a  # 取余等于
c **= a  # 幂等于
c //= a  # 取整除等于
# 逻辑运算符：and，or，not
print(a and b)  # 20   （必须满足所有的条件）
print(a or b)   # 10     （满足一个的条件）
print(not a)    # False
# 成员运算符：in，not in
L = [1, 2, 3]
a = 3
print(a in L)   # True
print(a not in L)  # False

```

### 七，转义

#### 一，定义

```
# 1.取消转义
print('after\\noon')
print(r'after\noon')
print('\n')
# 2.+
s1 = "a"
s2 = "b"
s3 = s1 + s2
print(s3)
print("1:" + s3)
print("1:", s3)

print("="*20)

```

### 八，查看变量的内存地址

#### 一，ID

```
# id:查看变量的内存地址
print(id(n))    # 1964884832
# 为了优化内存，对于-5--257范围内值，不同变量是共用一个内存地址的

n = 122
n1 = int(122)
n2 = 122
print(id(n))
print(id(n1))
print(id(n2))
```

