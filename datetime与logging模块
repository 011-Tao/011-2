#### 一、Datetime模块

##### 1）简介

1.0datetime是python处理时间和日期的标准库

2.![12](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\12.png)

3.主要使用： datetime.datetime( ) 、  datetime.timedelta( )

##### 2）基本使用

![13](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\13.png)

##### 3）类中常用方法

1.获取当前日期时间：datetime.now();

```
res = datetime.now()
print(res)     #2019-08-02 11:26:11.663369

```

2.日期时间转化为时间戳：时间日期对象.timestamp();          例如：datetime.now().timestamp()

```
re = datetime.now().timestamp()
print(re)      #1564716560.600063
```

3.时间戳转化为日期时间：datetime.fromtimestamp(时间戳)      例如： datetime.fromtimestamp(1534231316.796308)

```
cu = datetime.fromtimestamp(1564716560.600063)
print(cu)      #2019-08-02 11:29:20.600063
```

4.日期时间对象转字符串：时间日期对象.strftime(format)     例如： datetime.now().strftime("%Y-%m-%d")

```
sh = datetime.now().strftime('%Y年-%m月-%d日')
print(sh)      #2019年-08月-02日
```

5.字符串转日期时间对象：datetime.strptime(data_str, format)     例如： datetime.strptime('2018-3-22  15:28:18', '%Y-%m-%d  %H:%M:%S')

```
s = datetime.strptime('2019-08-02 11:29:20','%Y-%m-%d %H:%M:%S')
print(s)       #2019-08-02 11:29:20
```



##### 4）格式字符串常用格式

![14](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\14.png)

##### 5）Timedelte:时间运算

1.例如：

```
datetime.timedelta( days=0,
                                       seconds=0, microseconds=0 milliseconds=0,
                                       minutes=0, hours=0, weeks=0 )

```

2.![15](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\15.png)

#### 二、Logging模块

##### 1）简介

1.

![16](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\16.png)

2.logging.level(message)                创建一条level级别的日志

3.logging.basicConfig()                    对logger进行配置

4.![17](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\17.png)

```
from datetime import datetime
import logging

now = datetime.now()
# print(now)
# logging.info(now)
# logging.warning(now)         #WARNING:root:2019-08-02 12:25:51.620682

logging.basicConfig(level=logging.DEBUG)   #可以把输出的信息分成多个级别
# logging.basicConfig(level=logging.INFO)     #将logging.debug(a)调试忽略
#应用调试
a = 2 + 3
logging.debug(a)      #DEBUG:root:5
b = a - 2
logging.debug(b)      #DEBUG:root:3
c = b / 2
logging.debug(c)
d = c * 8
logging.debug(d)
e = d ** 2
print(e)      #144.0
```



##### 2）日志等级

1.Logging 中几种级别：

```
DEBUG < INFO < WARNING < ERROR < CRITICAL
```

2.![18](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\18.png)

##### 3）Formatter格式

1.使用![19](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\19.png)

![22](photo/22.png)

```
import logging

logging.basicConfig(filename='my.py',     #保存到虚拟机文件（my.py）
                    filemode='a',         #a为追加   w为覆盖
                    level=logging.DEBUG,  #限制级别
                    format='%(asctime)s %(filename)s %(lineno)s %(message)s')

a = 8 +5
logging.debug(a)         # 2019-08-02 12:52:04,876        date_t.py       53       13

#注意：两次配置 只有第一次生效，第二次无效
```

4）模块化组件

 1.简介![20](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\20.png)

2.使用

1（创建一个logger（日志处理器）对象

2（定义handler(日志处理器)，决定把日志发到哪里

```
常用的是
StreamHandler      输出到控制台
FileHandler        输出到文件

```

3（设置日志级别（level）和输出格式Formatters（日志格式器）

4（把handler添加到对应的logger中去

5（![21](C:\Users\Administrator\Desktop\Data\Python_note\work.md\photo\21.png)

```
import logging

my_logger = logging.Logger('第一个日志处理器')   #日志处理器对象

#创建文件保存
fh = logging.FileHandler("you.log")

#设置级别和格式
fh.setLevel(logging.INFO)
fmt  = logging.Formatter('time: %(asctime)s - content: %(message)s')
fh.setFormatter(fmt)

#定义完毕，把handler添加到logger里面去
my_logger.addHandler(fh)


#设置第二handler
sh = logging.StreamHandler()
sh.setLevel(logging.DEBUG)
fmt1 = logging.Formatter('time: %(asctime)s - content: %(message)s-streamHandler')
my_logger.addHandler(sh)


#设置完毕，开始使用
my_logger.info("我是组件")

```

