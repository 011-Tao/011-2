#### 1.概念

```
正则表达式是一个工具，用来匹配或者提取字符串，用re库来实现，所有的正则表达式的语法都是一样的
```

```
爬虫和web
爬虫：按指定的格式提取信息
web：12345@qq.com 
```

```
怎么学？正则本身不难，但是正则的内容多，要去做笔记，要去用，去敲：笔记一定要记好，多练习。
```

```
re.findall():将符合规则的字符串，以列表的形式，全部返回。
```

#### 2.元字符

```
正则表达式由普通字符和元字符组成。普通字符包括大小写的字母和数字，而元字符则具有特殊含义。
```

```
常用元字符：.  ^  $  {}  *  +  ? |  []
```

通配元字符 —

![1563523069870](assets/1563523069870.png)

锚点元字符

```
锁定行首： ^      Shift + 6
锁定行尾： $      Shift + 4
单词边界（不是元字符）： \b
  

```

定位

![1563523210886](assets/1563523210886.png)

![1563523219606](assets/1563523219606.png)

##### 1）重复元字符

![1563523346792](assets/1563523346792.png)

##### ![1563523365742](assets/1563523365742.png)

![1563523373902](assets/1563523373902.png)

![1563523381879](assets/1563523381879.png)

![1563523388001](assets/1563523388001.png)

##### 2）选择元字符

![1563523452160](assets/1563523452160.png)

5）转移元字符

##### ![1563523513678](assets/1563523513678.png)

```
元字符： .  *  ?  +  []  ()  \  ^  $
# 1.普通字符
import re
# re.findall():将符合规则的字符串，以列表的形式，全部返回。
s1 = "testing"
s2 = "Testing"
r1 = re.findall("test", s1)
print(r1)   # ['test']
r2 = re.findall("test", s2)
print(r2)   # []
r3 = re.findall("test", s2, re.I)   # 修饰符re.I:是匹配对大小写不敏感
print(r3)   # ['Test']

# 2.通配符.：匹配除换行符"\n"以外的单个字符
s1 = "testing"
s2 = "testing\n"
r1 = re.findall(".", s1)
print(r1)
r2 = re.findall(".", s2)
print(r2)
r3 = re.findall(".", s2, re.S)  # 修饰符re.S:使.匹配包括换行符在内的单个字符
print(r3)

# 3.^脱字符:匹配输入字符串的开始位置
s = 'testing\nTesting\ntest'
r1 = re.findall("^test", s)
print(r1)   # ['test']
r2 = re.findall("^test", s, re.M)   # 修饰符re.M：多行匹配
print(r2)
r3 = re.findall("^test", s, re.M | re.I)    # 多个修饰符通过OR(|)来指定
print(r3)

# 4.$匹配输入字符串的结束位置
s = 'testing\nTesting\ntest'
r1 = re.findall("testing$", s)
print(r1)   # []
r2 = re.findall("testing$", s, re.M)
print(r2)   # ['testing']
r3 = re.findall("testing$", s, re.M | re.I)
print(r3)   # ['testing', 'Testing']

# 5. * + ? 匹配前面的子表示式的次数（*(0-无穷）任意次，+（1-无穷）大于等于1，？（0|1）零次或一次）
s = 'z\nzo\nzoo\nzooo'

r1 = re.findall("zo*", s, re.M)
print(r1)   # ['z', 'zo', 'zoo']
r2 = re.findall("zo+", s, re.M)
print(r2)
r3 = re.findall("zo?", s, re.M)    # zo? z  zo
print(r3)

# 6.{}重复元字符，也是控制匹配子表达式次数的
s = 'z\nzo\nzoo\nzooo'
r1 = re.findall("zo*", s, re.M)
print(r1)   # ['z', 'zo', 'zoo', 'zooo']
r2 = re.findall("zo{0,}", s, re.M)
print(r2)   # ['z', 'zo', 'zoo', 'zooo']
r2 = re.findall("zo+", s, re.M)
print(r2)   # ['zo', 'zoo', 'zooo']
r2 = re.findall("zo{1,}", s, re.M)
print(r2)   # ['zo', 'zoo', 'zooo']
r3 = re.findall("zo?", s, re.M)
print(r3)   # ['z', 'zo', 'zo', 'zo']
r3 = re.findall("zo{0,1}", s, re.M)
print(r3)   # ['z', 'zo', 'zo', 'zo']

#
r4 = re.findall("zo{2}", s, re.M)
print(r4)   # ['zoo', 'zoo']

# 7.[]字符组。大括号{}代表次数，中括号[]代表内容
s = 'test\nTesting\nzoo'

r1 = re.findall("[eio]", s, re.M)   # 匹配包含的任意字符
print(r1)   # ['e', 'e', 'i', 'o', 'o']

r1 = re.findall("[e-o]", s, re.M)   # 匹配包含区间的任意字符efghigklmno
print(r1)   # ['e', 'e', 'i', 'n', 'g', 'o', 'o']

r1 = re.findall("^[eio]", s, re.M)   # 匹配以[eio]包含的任意字符开头的字符
print(r1)   # []

r1 = re.findall("[^eio]", s, re.M)  # 匹配[]未包含的任意字符
print(r1)   # ['t', 's', 't', '\n', 'T', 's', 't', 'n', 'g', '\n', 'z']

r1 = re.findall("[^e-o]", s, re.M)   # 匹配[]未包含的任意字符
print(r1)   # ['t', 's', 't', '\n', 'T', 's', 't', '\n', 'z']

# 8.|选择元字符
s = 'z\nzood\nfood'
r = re.findall("z|food", s, re.M)
print(r)    # ['z', 'z', 'food']
r = re.findall("[z|f]ood", s, re.M)
print(r)    # ['zood', 'food']

# 9.()：分组元字符，匹配表达式的字符保存到一个临时区域，返回值为（）内的内容
s = 'z\nzood\nfood'
r = re.findall("[z|f]o*", s, re.M)
print(r)    # ['z', 'zoo', 'foo']
r = re.findall("[z|f](o*)", s, re.M)
print(r)    # ['', 'oo', 'oo']

# 10.
# 取消字符串的转义在前面加r或者\
# 取消正则语法的转义,加\
# s = 'z\nzood\nfood'
# print(s)
# s1 = r'z\nzood\nfood'
# print(s1)
# s2 = 'z\\nzood\\nfood'
# print(s2)
s = '12345@qq.com'
r = re.findall("\.", s)
print(r)

# 11.贪婪模式和非贪婪模式
s = "abcadcaec"
r1 = re.findall(r"ab.*c", s)    # 贪婪模式:.*, .+尽可能多的匹配字符
print(r1)   # ['abcadcaec']

r1 = re.findall(r"ab.*?c", s)    # 非贪婪模式:尽可能少的匹配字符
print(r1)   # ['abc']
```



#### 3.预定义字符类

##### 1）字符

| **预定义字符类** | **说明**           | **对等字符类**  |
| ---------------- | ------------------ | --------------- |
| \d               | 任一数字字符       | [0-9]           |
| \D               | 任一非数字字符     | [^0-9]          |
| \s               | 任一空白符         | [\t\n\x0B\f\r]  |
| \S               | 任意非空白符       | [^\t\n\x0B\f\r] |
| \w               | 任一字母数字字符   | [a-zA-Z0-9]     |
| \W               | 任一非字母数字字符 | [^a-zA-Z0-9]    |

2）预定义字符类

![1563524574415](assets/1563524574415.png)

```
字符组[]
# 预定义字符组
# \d == [0-9]
s = "<a href='asdf'>9874516846579845789456</a>"

r = re.findall("\d", s)
print(r)

r = re.findall("\d.*\d", s)
print(r)
# \D == [^0-9]
r = re.findall("\D", s)
print(r)

# \s:匹配任意的空白符:空格、换行（\n)、制表符（tab）
s = "j0ohqngkadij*+-/你 好\t\n_ajgoaenoigjarif"
r = re.findall('\s', s)
print(r)    # [' ', '\t', '\n']

# \w:匹配字母数字下划线汉字
s = "j0ohqngkadij*+-/你 好\t\n_ajgoaenoigjarif"
r = re.findall('\w', s)
print(r)

s = "email:123456@qq.com"
r = re.findall("\d+@\w+\.com$", s)
print(r)
```



##### 2）判断用户提交的邮箱的格式是否正确

一个或多个字母或数字@一个或多个字母或数字.com

r‘^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.com$'

![1563522868844](assets/1563522868844.png)

##### 3）抓取页面中特定部分数据

![1563522935821](assets/1563522935821.png)

注意：
如果正则表达式中使用了括号，
那么findall函数匹配的结果
只会是括号中的内容，
而不是完整的匹配。

因此我们可以利用这种机制来
完整对需要部分的数据提取

```
一个函数： re.findall(pattern, string)

```

###### 
